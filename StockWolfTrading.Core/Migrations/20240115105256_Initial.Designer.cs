// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockWolfTrading.Core.Models;

#nullable disable

namespace StockWolfTrading.Core.Migrations
{
    [DbContext(typeof(StockWolfTradingDBContext))]
    [Migration("20240115105256_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StockWolfTrading.Core.Models.Algorithm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlgorithmName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Algorithm");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Cert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Value")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Certs");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.DailyAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MS_Down")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MS_Down15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MS_Down5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MS_Up")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MS_Up15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MS_Up5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PocLevel")
                        .HasColumnType("real");

                    b.Property<string>("ResistanceG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResistanceGp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportGp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DailyAnalysis");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<int>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRefId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderRefId")
                        .HasColumnType("int");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderRefId");

                    b.HasIndex("ProductRefId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.OrderDetailsTicker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateSelected")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderDetailsRefId")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("TickerName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailsRefId");

                    b.ToTable("OrderDetailsTicker");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("MaxStocks")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingsId"), 1L, 1);

                    b.Property<string>("SettingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingsId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AlgorithmRefId")
                        .HasColumnType("int");

                    b.Property<bool?>("BuySell")
                        .HasColumnType("bit");

                    b.Property<float>("CandleClose")
                        .HasColumnType("real");

                    b.Property<float>("CandleHigh")
                        .HasColumnType("real");

                    b.Property<float>("CandleLow")
                        .HasColumnType("real");

                    b.Property<float>("CandleOpen")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlgorithmRefId");

                    b.ToTable("Trade");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExistUserInSafetyReport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpire")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<byte[]>("SignatureImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.UserProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductProductId");

                    b.HasIndex("UserUserId");

                    b.ToTable("UserProducts");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.UserRoles", b =>
                {
                    b.Property<int>("UserUserId")
                        .HasColumnType("int")
                        .HasColumnName("User_UserId");

                    b.Property<int>("RoleRoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_RoleId");

                    b.HasKey("UserUserId", "RoleRoleId")
                        .HasName("PK_dbo.UserRoles");

                    b.HasIndex("RoleRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float?>("CandleClose")
                        .HasColumnType("real");

                    b.Property<float?>("CandleHigh")
                        .HasColumnType("real");

                    b.Property<float?>("CandleLow")
                        .HasColumnType("real");

                    b.Property<float?>("CandleOpen")
                        .HasColumnType("real");

                    b.Property<int?>("CandleTime")
                        .HasColumnType("int");

                    b.Property<string>("Interval")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Ticker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRefId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Order", b =>
                {
                    b.HasOne("StockWolfTrading.Core.Models.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserRefId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.OrderDetail", b =>
                {
                    b.HasOne("StockWolfTrading.Core.Models.Order", "OrderRef")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderRefId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Orders");

                    b.HasOne("StockWolfTrading.Core.Models.Product", "ProductRef")
                        .WithMany("OrderDetail")
                        .HasForeignKey("ProductRefId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Products");

                    b.Navigation("OrderRef");

                    b.Navigation("ProductRef");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.OrderDetailsTicker", b =>
                {
                    b.HasOne("StockWolfTrading.Core.Models.OrderDetail", "OrderDetailsRef")
                        .WithMany("OrderDetailsTicker")
                        .HasForeignKey("OrderDetailsRefId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetailsTickers_OrderDetails");

                    b.Navigation("OrderDetailsRef");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Trade", b =>
                {
                    b.HasOne("StockWolfTrading.Core.Models.Algorithm", "AlgorithmRef")
                        .WithMany("Trade")
                        .HasForeignKey("AlgorithmRefId")
                        .IsRequired()
                        .HasConstraintName("FK_Trades_Algorithms");

                    b.Navigation("AlgorithmRef");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.UserProducts", b =>
                {
                    b.HasOne("StockWolfTrading.Core.Models.Product", "ProductProduct")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockWolfTrading.Core.Models.User", "UserUser")
                        .WithMany("UserProducts")
                        .HasForeignKey("UserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductProduct");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.UserRoles", b =>
                {
                    b.HasOne("StockWolfTrading.Core.Models.Role", "RoleRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserRoles_Identity.Role_Role_RoleId");

                    b.HasOne("StockWolfTrading.Core.Models.User", "UserUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.UserRoles_Identity.User_User_UserId");

                    b.Navigation("RoleRole");

                    b.Navigation("UserUser");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.UserSettings", b =>
                {
                    b.HasOne("StockWolfTrading.Core.Models.User", "UserRef")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserRefId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSettings_User");

                    b.Navigation("UserRef");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Algorithm", b =>
                {
                    b.Navigation("Trade");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Order", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.OrderDetail", b =>
                {
                    b.Navigation("OrderDetailsTicker");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Product", b =>
                {
                    b.Navigation("OrderDetail");

                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("StockWolfTrading.Core.Models.User", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("UserProducts");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
